last left

https://www.w3schools.com/django/django_404.php

folders
.venv
my_tennis_club

==
folder : my_tennis_club
==
folder 
   members
   my_tennis_club
files
  db.sqlite3
  manage.py
==
folder : members
==
folders
  migrations
  templates
  __pycache__

files

admin.py
apps.py
models.py
tests.py
urls.py
views.py
==

admin.py
==
from django.contrib import admin

# Register your models here.

==
apps.py
==
from django.apps import AppConfig


class MembersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "members"
==
models.py
==
# c:\my_tennis\club\my_tennis_club\members\models.py

from django.db import models

class Member(models.Model):
  firstname = models.CharField(max_length=255)
  lastname = models.CharField(max_length=255)
  phone = models.IntegerField(null=True)   # new
  joined_date = models.DateField(null=True) # new

==
tests.py
==
from django.test import TestCase

# Create your tests here.

==
urls.py
==
# my_tennis_club\my_tennis_club/members/urls.py:

from django.urls import  path
from . import views

urlpatterns = [
  path('members/', views.members, name='members'),
]

==
views.py
==
# my_tennis_club\my_tennis_club\members\

from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader
from .models import Member
 
def members(request):
      mymembers = Member.objects.all().values()
      template = loader.get_template('all_members.html')
      context = { 'mymembers': mymembers, }
      return HttpResponse(template.render(context, request))

       #template = loader.get_template('myfirst.html')
       #return HttpResponse(template.render())
       # return HttpResponse("Hello world!")
==
folder c:\my_tennis_club\my_tennis_club\members/templates
==
all_members.html
==
<!-- my_tennis_club/ my_tennis_club/members/templates/all_members.html: -->

<!DOCTYPE html>
<html>
<body>

<h1>Members</h1>
  
<ul>
  {% for x in mymembers %}
    <li>{{ x.firstname }} {{ x.lastname }}  {{ x.phone }}  {{ x.joined_date }} </li>
  {% endfor %}
</ul>

</body>
</html>

==
myfirst.html
==
<!-- my_tennis_club/members/templates/myfirst.html: -->

<!DOCTYPE html>
<html>
<body>

<h1>Hello World!</h1>
<p>Welcome to my first Django project!</p>

</body>
</html>

==
folder: c:\my_tennis_club\my_tennis_club\my_tennis_club

==
folder : __pycache__

files
==
asgi.py
settings.py
urls.py
wsgi.py
__init__.py
==
asgi.py
==
"""
ASGI config for my_tennis_club project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "my_tennis_club.settings")

application = get_asgi_application()


==
settings.py
==
"""
Django settings for my_tennis_club project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-x^gj6kokj8)+@jl6)+4bq+q**h!n_bf8)%+u)ps*#63=!a0@u#"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "members",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "my_tennis_club.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "my_tennis_club.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

==
urls.py
==
"""
URL configuration for my_tennis_club project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include ,  path

urlpatterns = [
    path('', include('members.urls')),
    path("admin/", admin.site.urls),
]

==
wsgi.py
==
"""
WSGI config for my_tennis_club project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "my_tennis_club.settings")

application = get_wsgi_application()

==








